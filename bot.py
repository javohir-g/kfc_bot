import telebot
import buttons as bt
from geopy.geocoders import Photon
import database as db
#db.add_product("–ë—É—Ä–≥–µ—Ä", 30000, "–ª—É—á—à–∏–π –±—É—Ä–≥–µ—Ä", 20, "https://menunedeli.ru/wp-content/uploads/2023/07/4523862E-973D-49D0-BE99-2609DDAA5CF4-933x700.jpeg")
#db.add_product("–ß–∏–∑–±—É—Ä–≥–µ—Ä", 35000, "–ª—É—á—à–∏–π —á–∏–∑–±—É—Ä–≥–µ—Ä", 20, "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR7lfdGQENwsxIWcpk80o43dRz2V8jN9pBK_w&s")
#db.add_product("–•–æ—Ç-–¥–æ–≥", 15000, "–ª—É—á—à–∏–π —Ö–æ—Ç–¥–æ–≥", 0, "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSsfW388zWeoTBoYVtL5yJi85sJmFoVB3isLw&s")

bot = telebot.TeleBot(token="7927478236:AAEaWaz1v2rNK9W5Oc2cZ7PPRjDhaZZMUHk")
geolocator = Photon(user_agent="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36")
users = {}
admin_id = -4578355993
@bot.message_handler(commands=["start"])
def start(message):
    user_id = message.from_user.id
    checker = db.check_user(user_id)
    if checker == True:
        bot.send_message(user_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=bt.main_menu_bt())
    elif checker == False:
        bot.send_message(user_id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à –±–æ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏!\n"
                                  "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—ë –∏–º—è")
        bot.register_next_step_handler(message, get_name)

def get_name(message):
    user_id = message.from_user.id
    name = message.text
    bot.send_message(user_id, "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏",
                     reply_markup=bt.phone_number_bt())
    bot.register_next_step_handler(message, get_number, name)

def get_number(message, name):
    user_id = message.from_user.id
    if message.contact:
        phone_number = message.contact.phone_number
        bot.send_message(user_id, f"{name}, –≤—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n"
                                  "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é", reply_markup=bt.main_menu_bt())
        db.add_user(name, phone_number, user_id)
    else:
        bot.send_message(user_id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é",
                         reply_markup=bt.phone_number_bt())
        bot.register_next_step_handler(message, get_number, name)
def get_location(message):
    user_id = message.from_user.id
    if message.location:
        longitude = message.location.longitude
        latitude = message.location.latitude
        address = geolocator.reverse((latitude, longitude)).address
        print(address)
@bot.callback_query_handler(lambda call: call.data in ["back", "main_menu", "cart", "plus", "minus",
                                                       "to_cart", "clear_cart", "order"])
def all_calls(call):
    user_id = call.message.chat.id
    if call.data == "main_menu":
        bot.delete_message(user_id, call.message.id)
        bot.send_message(user_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=bt.main_menu_bt())
    elif call.data == "back" or call.data == "main_menu":
        bot.delete_message(user_id, call.message.id)
        bot.send_message(user_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=bt.main_menu_bt())
    elif call.data == "plus":
        current_amount = users[user_id]["pr_count"]
        users[user_id]["pr_count"] += 1
        bot.edit_message_reply_markup(chat_id=user_id, message_id=call.message.message_id,
                                      reply_markup=bt.exact_product_in(current_amount=current_amount,
                                                                       plus_or_minus="plus"))
    elif call.data == "minus":
        current_amount = users[user_id]["pr_count"]
        if current_amount > 1:
            users[user_id]["pr_count"] -= 1
            bot.edit_message_reply_markup(chat_id=user_id, message_id=call.message.message_id,
                                          reply_markup=bt.exact_product_in(current_amount=current_amount,
                                                                           plus_or_minus="minus"))
    elif call.data == "to_cart":
        db.add_to_cart(user_id=user_id, pr_id=users[user_id]["pr_id"], pr_name=users[user_id]["pr_name"],
                       pr_count=users[user_id]["pr_count"], pr_price=users[user_id]["pr_price"])
        users.pop(user_id)
        bot.delete_message(user_id, call.message.id)
        all_product = db.get_pr_id_name()
        bot.send_message(user_id, "–ü—Ä–æ–¥—É–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É. "
                                  "–ñ–µ–ª–∞–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ?", reply_markup=bt.products_in(all_product))
    elif call.data == "clear_cart":
        db.delete_user_cart(user_id)
        bot.delete_message(user_id, call.message.id)
        all_product = db.get_pr_id_name()
        bot.send_message(user_id, "–ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
                         reply_markup=bt.products_in(all_product))
    elif call.data == "order":
        bot.delete_message(user_id, call.message.id)
        user_cart = db.get_user_cart(user_id)
        full_text = f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: \n\n"
        total_amount = 0
        for i in user_cart:
            full_text += f"{i[0]} x {i[1]} = {i[2]}\n"
            total_amount += i[2]
        full_text += f"\n\n –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {total_amount} —Å—É–º"
        bot.send_message(admin_id, full_text)
        bot.send_message(user_id, "–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
        db.delete_user_cart(user_id)




@bot.callback_query_handler(lambda call: "prod_" in call.data)
def product_call(call):
    user_id = call.message.chat.id
    bot.delete_message(user_id, call.message.message_id)
    product_id = int(call.data.replace("prod_", ""))
    product_info = db.get_exact_product(product_id)
    users[user_id] = {"pr_id": product_id, "pr_name": product_info[0],
                      "pr_count": 1, "pr_price": product_info[1]}
    text = (f"{product_info[0]}\n\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {product_info[2]}\n"
            f"–¶–µ–Ω–∞: {product_info[1]} —Å—É–º")
    bot.send_photo(user_id, photo=product_info[3], caption=text,
                   reply_markup=bt.exact_product_in())


@bot.message_handler(content_types=["text"])
def main_menu(message):
    user_id = message.from_user.id
    if message.text == "üç¥–ú–µ–Ω—é":
        all_product = db.get_pr_id_name()
        bot.send_message(user_id, "–ú–µ–Ω—é", reply_markup=bt.products_in(all_product))
    elif message.text == "üõí–ö–æ—Ä–∑–∏–Ω–∞":
        user_cart = db.get_user_cart(user_id)
        full_text = f"–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞: \n\n"
        total_amount = 0
        for i in user_cart:
            full_text += f"{i[0]} x {i[1]} = {i[2]}\n"
            total_amount += i[2]
        full_text += f"\n\n –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {total_amount} —Å—É–º"
        bot.send_message(user_id, full_text, reply_markup=bt.get_cart_kb())
    elif message.text == "‚ùóÔ∏è–û—Ç–∑—ã–≤":
        bot.send_message(user_id, "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –æ—Ç–∑—ã–≤–∞")


bot.infinity_polling()